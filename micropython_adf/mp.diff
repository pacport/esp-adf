diff --git a/ports/esp32/esp32_common.cmake b/ports/esp32/esp32_common.cmake
index 37a19316b..46c264123 100644
--- a/ports/esp32/esp32_common.cmake
+++ b/ports/esp32/esp32_common.cmake
@@ -136,6 +136,7 @@ list(APPEND IDF_COMPONENTS
     ulp
     vfs
     xtensa
+    boards
 )
 
 # Register the main IDF component.
diff --git a/ports/esp32/machine_sdcard.c b/ports/esp32/machine_sdcard.c
index bc4aaf30c..41b9fede1 100644
--- a/ports/esp32/machine_sdcard.c
+++ b/ports/esp32/machine_sdcard.c
@@ -37,6 +37,7 @@
 #include "driver/sdspi_host.h"
 #include "sdmmc_cmd.h"
 #include "esp_log.h"
+#include "soc/soc_caps.h"
 
 #define DEBUG 0
 #if DEBUG
@@ -173,6 +174,18 @@ STATIC mp_obj_t machine_sdcard_make_new(const mp_obj_type_t *type, size_t n_args
         ARG_width,
         ARG_cd,
         ARG_wp,
+#ifdef SOC_SDMMC_USE_GPIO_MATRIX
+        ARG_clk,
+        ARG_cmd,
+        ARG_d0,
+        ARG_d1,
+        ARG_d2,
+        ARG_d3,
+        ARG_d4,
+        ARG_d5,
+        ARG_d6,
+        ARG_d7,
+#endif /*SOC_SDMMC_USE_GPIO_MATRIX*/
         ARG_miso,
         ARG_mosi,
         ARG_sck,
@@ -184,6 +197,18 @@ STATIC mp_obj_t machine_sdcard_make_new(const mp_obj_type_t *type, size_t n_args
         { MP_QSTR_width,    MP_ARG_KW_ONLY | MP_ARG_INT, {.u_int = 1} },
         { MP_QSTR_cd,       MP_ARG_KW_ONLY | MP_ARG_OBJ, {.u_obj = mp_const_none} },
         { MP_QSTR_wp,       MP_ARG_KW_ONLY | MP_ARG_OBJ, {.u_obj = mp_const_none} },
+#ifdef SOC_SDMMC_USE_GPIO_MATRIX
+        { MP_QSTR_clk,      MP_ARG_KW_ONLY | MP_ARG_OBJ, {.u_obj = mp_const_none} },
+        { MP_QSTR_cmd,      MP_ARG_KW_ONLY | MP_ARG_OBJ, {.u_obj = mp_const_none} },
+        { MP_QSTR_d0,       MP_ARG_KW_ONLY | MP_ARG_OBJ, {.u_obj = mp_const_none} },
+        { MP_QSTR_d1,       MP_ARG_KW_ONLY | MP_ARG_OBJ, {.u_obj = mp_const_none} },
+        { MP_QSTR_d2,       MP_ARG_KW_ONLY | MP_ARG_OBJ, {.u_obj = mp_const_none} },
+        { MP_QSTR_d3,       MP_ARG_KW_ONLY | MP_ARG_OBJ, {.u_obj = mp_const_none} },
+        { MP_QSTR_d4,       MP_ARG_KW_ONLY | MP_ARG_OBJ, {.u_obj = mp_const_none} },
+        { MP_QSTR_d5,       MP_ARG_KW_ONLY | MP_ARG_OBJ, {.u_obj = mp_const_none} },
+        { MP_QSTR_d6,       MP_ARG_KW_ONLY | MP_ARG_OBJ, {.u_obj = mp_const_none} },
+        { MP_QSTR_d7,       MP_ARG_KW_ONLY | MP_ARG_OBJ, {.u_obj = mp_const_none} },
+#endif /*SOC_SDMMC_USE_GPIO_MATRIX*/
         // These are only needed if using SPI mode
         { MP_QSTR_miso,     MP_ARG_KW_ONLY | MP_ARG_OBJ, {.u_obj = mp_const_none} },
         { MP_QSTR_mosi,     MP_ARG_KW_ONLY | MP_ARG_OBJ, {.u_obj = mp_const_none} },
@@ -293,7 +318,18 @@ STATIC mp_obj_t machine_sdcard_make_new(const mp_obj_type_t *type, size_t n_args
         // SD/MMC interface
         DEBUG_printf("  Setting up SDMMC slot configuration");
         sdmmc_slot_config_t slot_config = SDMMC_SLOT_CONFIG_DEFAULT();
-
+#ifdef SOC_SDMMC_USE_GPIO_MATRIX
+        SET_CONFIG_PIN(slot_config, clk, ARG_clk);
+        SET_CONFIG_PIN(slot_config, cmd, ARG_cmd);
+        SET_CONFIG_PIN(slot_config, d0,  ARG_d0);
+        SET_CONFIG_PIN(slot_config, d1,  ARG_d1);
+        SET_CONFIG_PIN(slot_config, d2,  ARG_d2);
+        SET_CONFIG_PIN(slot_config, d3,  ARG_d3);
+        SET_CONFIG_PIN(slot_config, d4,  ARG_d4);
+        SET_CONFIG_PIN(slot_config, d5,  ARG_d5);
+        SET_CONFIG_PIN(slot_config, d6,  ARG_d6);
+        SET_CONFIG_PIN(slot_config, d7,  ARG_d7);
+#endif /*SOC_SDMMC_USE_GPIO_MATRIX*/
         // Stronger external pull-ups are still needed but apparently
         // it is a good idea to set the internal pull-ups anyway.
         // slot_config.flags = SDMMC_SLOT_FLAG_INTERNAL_PULLUP;
diff --git a/ports/esp32/modules/_boot.py b/ports/esp32/modules/_boot.py
index 651fc7b10..5b01f5c60 100644
--- a/ports/esp32/modules/_boot.py
+++ b/ports/esp32/modules/_boot.py
@@ -1,6 +1,9 @@
 import gc
 import os
 from flashbdev import bdev
+import machine
+import sys
+from machine import Pin
 
 try:
     if bdev:
@@ -10,4 +13,26 @@ except OSError:
 
     vfs = inisetup.setup()
 
+try:
+    board_info = os.uname()[4]
+    if board_info.find('ESP-Audio Lyrat mini v1.1') >= 0:
+        print('Mini Enable sdcard')
+        sd_enable_pin=Pin(13, Pin.OUT)
+        sd_enable_pin.value(0)
+
+    sdcard = None
+    if board_info.find('ESP-Audio Korvo2 v3') >= 0:
+        sdcard = machine.SDCard(clk=Pin(15), cmd=Pin(7), d0=Pin(4))
+    else:
+        sdcard = machine.SDCard()
+
+    if sdcard:
+        os.mount(sdcard, '/sdcard')
+        sys.path.append('/sdcard')
+        sys.path.append('/sdcard/lib')
+
+    print(sys.path)
+except OSError:
+    pass
+
 gc.collect()
